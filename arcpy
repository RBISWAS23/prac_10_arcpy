# ************************ Create a point geometry *************************************
import arcpy
import os
x_delhi = 77.20852409389596
y_delhi = 28.65392854307051
point_obj = arcpy.Point(x_delhi,y_delhi)
spatial_ref = arcpy.SpatialReference("WGS 1984")
point_geom = arcpy.PointGeometry(point_obj,spatial_ref)
gdp_path = 
r".gdb"

fc_name = "Delhi"
fc_path = os.path.join(gdp_path,fc_name)
arcpy.CopyFeatures_management(point_geom,fc_path)
print("complete")

# ************************* Create a line geometry ***********************************
import arcpy
import os
x_mumbai = 72.875489101964
y_mumbai = 19.077263120208265
x_pune = 73.84366705841208
y_pune = 18.51660637428715
pt_obj_mumbai = arcpy.Point(x_mumbai,y_mumbai)
pt_obj_pune = arcpy.Point(x_pune,y_pune)
spatial_ref = arcpy.SpatialReference("WGS 1984")
polyline_array = arcpy.Array()
polyline_array.add(pt_obj_mumbai)
polyline_array.add(pt_obj_pune)
gdp_path = r".gdb"


fc_name = "mumbai_pune"
fc_path = os.path.join(gdp_path,fc_name)
polyline_geom = arcpy.Polyline(polyline_array, spatial_ref)
arcpy.CopyFeatures_management(polyline_geom,fc_path)
print("complete")

# ********* Create a Polygon Geometry ****************************************************
import arcpy
import os
x_nagpur = 79.0878199554386
y_nagpur = 21.147983062608986

x_chandrapur = 79.29716613436133
y_chandrapur = 19.959943613189097

x_yavatmal = 78.12661054100442
y_yavatmal = 20.39172688075951

pt_obj_nagpur = arcpy.Point(x_nagpur,y_nagpur)
pt_obj_chandrapur = arcpy.Point(x_chandrapur,y_chandrapur)
pt_obj_yavatmal = arcpy.Point(x_yavatmal,y_yavatmal)
spatial_ref = arcpy.SpatialReference("WGS 1984")
polygon_array = arcpy.Array()
polygon_array.add(pt_obj_nagpur)
polygon_array.add(pt_obj_chandrapur)
polygon_array.add(pt_obj_yavatmal)
gdp_path = 
r".gdb"

fc_name = "Nagpur_chandrapur_yavatmal_polygon"
fc_path = os.path.join(gdp_path,fc_name)
polygon_geom = arcpy.Polygon(polygon_array, spatial_ref)
arcpy.CopyFeatures_management(polygon_geom,fc_path)
print("complete")

# ************   Create a script tool in ArcGIS Pro *****************************************
import arcpy
import os
gdp_path = arcpy.GetParameterAsText(0)
if not arcpy.Exists("gdp_path"):
 folder_path, gdp_name = os.path.split(gdp_path)
 arcpy.management.CreateFileGDB(folder_path, gdp_name)
 gdp_path = os.path.join(folder_path,gdp_name)
x_coord = arcpy.GetParameterAsText(1)
y_coord = arcpy.GetParameterAsText(2)
output_fc_name = arcpy.GetParameterAsText(3)
fc_path = os.path.join(gdp_path,output_fc_name)
point_obj = arcpy.Point(x_coord,y_coord)
spatial_ref = arcpy.SpatialReference("WGS 1984")
point_geom = arcpy.PointGeometry(point_obj,spatial_ref)
arcpy.CopyFeatures_management(point_geom,fc_path)
print("complete")

#------------------- export a featureclass into different types (KMZ, CAD).---------------------------
import arcpy
import os
# defining script input
fc_input_path = arcpy.GetParameterAsText(0)
output_type = arcpy.GetParameterAsText(1)
output_folder = arcpy.GetParameterAsText(2)
file_name = arcpy.GetParameterAsText(3)
arcpy.MakeFeatureLayer_management(fc_input_path,"FcLayer")
if output_type == "KMZ":
 output_kml_file = "{}.KMZ".format(file_name)
 full_output_kmz_path = 
os.path.join(output_folder,output_kml_file)
 
arcpy.conversion.LayerToKML("FcLayer",full_output_kmz_path)
 print('exported')
elif output_type == "CAD":
 output_CAD_file = "{}.dwg".format(file_name)
 full_output_CAD_path = 
os.path.join(output_folder,output_CAD_file)
 # Process: Export to CAD
 arcpy.conversion.ExportCAD(fc_input_path, "DWG_R2018", 
full_output_CAD_path,"USE_FILENAMES_IN_TABLES","OVERWRITE_EXISTING_FILES"

** Get the list of maps in the current ProProject****************************************************
import arcpy
pro_project_path = r".aprx"








# ****************************** Arithmetic operations ************************************************************
# number_1 = 45
# number_2 = 63

# addition = (number_1 + number_2)
# subtraction = (number_1 - number_2)
# multiplication = (number_1 * number_2)
# division = (number_1/number_2)

# print('addition = {}'.format(addition))
# print('subtraction = {}'.format(subtraction))
# print('multiplication = {}'.format(multiplication))
# print('division = {}'.format(division))
# print("Process Completed")

# ******************************* Loop through a list ****************************************************************
# number_list = [98, 49, 58, 100, 10, 5, 60, 53, 70, 35, 25, 45]
# print("printing all integer ")
# for l in number_list:
#     print(l)
#
# print("printing the integer only if it is greater than 50")
# for y in number_list:
#     if y > 50:
#         print(y)

# ****************************** Creating Buffers ***************************************************
import arcpy
# Setting the default workspace
# arcpy.env.workspace = r"D:\1_BVIEER\3rd_sem\Programming for GIS- III Mr. Ronit Jadhav\Assignments\Assignment_1\ProProject_Practical_One\Practical_One.gdb"

# Corrected usage of arcpy.analysis.Buffer
# arcpy.analysis.Buffer("Wilson_Schools", "Wilson_School_Buffer_500m", "500 Meters")
# print("Process Completed")
# ****************************** FeatureToPoint ******************************************************
# Import arcpy package

wilson_polygon = Wilson_Zoning_path + "_PolygonToPoint"
arcpy.management.FeatureToPoint(Wilson_Zoning_path, wilson_polygon)

print("Process Completed")

wilson_polygon = Wilson_Zoning_path + "_PolygonToPoint"
arcpy.management.FeatureToPoint(Wilson_Zoning_path, wilson_polygon)

print("Process Completed")

# ******************************* Describe the feature class *********************************************************

# # Specify the path to the feature class
# fc_path = r''

# desc = arcpy.Describe(fc_path)

# # Access and print specific properties
# print(f"Feature Class Name: {desc.name}")
# print(f"Data Type: {desc.dataType}")
# print(f"Shape Type: {desc.shapeType}")

# ************************************************ Append a new value **********************************************************
# # Create a list of city names
# cities = ["Kolkata", "Delhi", "Mumbai", "Chennai", "Darjeeling"]
#
# # Append a new city to the list
# new_city = "Pune"
# cities.append(new_city)
#
# # Print the updated list
# print(cities)
************************************************  Print the length of the list **********************************************************
# Create a list of city names
# cities = ["Kolkata", "Delhi", "Mumbai", "Chennai", "Darjeeling"]
#
# # Append a new city to the list
# new_city = "Pune"
# cities.append(new_city)
#
# # # Print the updated list
# print(cities)
#
# # Print the length of the list
# print("Length of the list:", len(cities))

# Remove an element ---------------------------
# Create a list of city names
# cities = ["Kolkata", "Delhi", "Mumbai", "Chennai", "Darjeeling"]

# # Remove the element at index 2 (third element)
# removed_city = cities.pop(2)

# # Print the updated list
# print("Updated list after removing element at index 2:")
# print(cities)
#
# # Print the removed city
# print("Removed city:", removed_city)

# ********************************** Create a dictionary object **********************************************************************
# country_capital_dict = {
#     "India": "Delhi",
#     "Canada": "Ottawa",
#     "United Kingdom": "London",
#     "France": "Paris",
#     "Germany": "Berlin"
# }

# # Print only the names of countries (keys)
# country_names = list(country_capital_dict.keys())
# print("Names of Countries:")
# for country in country_names:
#     print(country)

# ------------------------- Insert one more value-------------------------------------------------
# Existing dictionary of countries and capitals
# country_capital_dict = {
#     "India": "Delhi",
#     "Canada": "Ottawa",
#     "United Kingdom": "London",
#     "France": "Paris",
#     "Germany": "Berlin"
# }

# # Insert one more country and its capital
# new_country = "Italy"
# new_capital = "Rome"
# country_capital_dict[new_country] = new_capital

# # Print the updated dictionary
# country_names = list(country_capital_dict.keys())
# print("Names of Countries:")
# for country in country_names:
#     print(country)

# ------Print the length of the dictionary----------------------------------------------------------------------------------------------------
# # Create a dictionary of countries and capitals
# country_capital_dict = {
#     "India": "Delhi",
#     "Canada": "Ottawa",
#     "United Kingdom": "London",
#     "France": "Paris",
#     "Germany": "Berlin"
# }
# # Print the length of the dictionary
# dictionary_length = len(country_capital_dict)
# print("Length of the Dictionary:", dictionary_length)

# -------Remove an element from the dictionary---------------------------------------------------------------------------
# # Existing dictionary of countries and capitals
# country_capital_dict = {
#     "India": "Delhi",
#     "Canada": "Ottawa",
#     "United Kingdom": "London",
#     "France": "Paris",
#     "Germany": "Berlin"
# }

# # Remove a specific element by key
# remove = "Canada"
# if remove in country_capital_dict:
#     del country_capital_dict[remove]
#
#
# # Print the updated dictionary
# country_names = list(country_capital_dict.keys())
# print("Names of Countries:")
# for country in country_names:
#     print(country)

# ************************************ Describe the feature class Spatial reference ************************************************
# # path to the feature class
# fc_path = r''

# # Describe the feature class
# desc = arcpy.Describe(fc_path)

# # Access and print specific properties
# print(f"Spatial Reference Name: {desc.spatialReference.name}")

# ------------------------ Feature type -----------------------------------------------------------------------------------------------
# # Specify the path to the feature class
# fc_path = r''
#
# # Describe the feature class
# desc = arcpy.Describe(fc_path)
#
# # Access and print specific properties
# print(f"Shape Type: {desc.shapeType}")

# ------------------------ Field names and its respective type. ----------------------------------------------------------------------------------
# # Specify the path to the feature class
# fc_path = r''

# # Describe the feature class
# desc = arcpy.Describe(fc_path)

# # Access and print specific properties
# print(f"Feature Class Name: {desc.name}")
# print(f"Data Type: {desc.dataType}")

# ***********************************escribe the  raster from the RASTER_DATA ********************************************
# --Band count-------------------------------------------------------------------------------------------
# # Specify the path to the raster dataset
# raster_path = r''

# # Describe the raster dataset
# desc = arcpy.Describe(raster_path)

# # Print the requested information
# print(f"Band Count: {desc.bandCount}")

# -------Format -----------------------------------------------------------------------------------------------
# # Specify the path to the raster dataset
# raster_path = r''
#
# # Describe the raster dataset
# desc = arcpy.Describe(raster_path)
#
# # Print the requested information
# print(f"Format: {desc.format}")

# ------- Image Base Name --------------------------------------------------------------------------------
# # Specify the path to the raster dataset
# raster_path = r""

# # Describe the raster dataset
# desc = arcpy.Describe(raster_path)

# # Print the requested information
# print(f"Base Name: {desc.basename}")

# ---------Image height and width---------------------------------------------------------------------------
# Create a Describe object from the raster band
desc = arcpy.Describe(r"")

# Print some raster band properties

print("Height: %d" % desc.height)
print("Width:  %d" % desc.width)

#***********************************************************************************************************************
import arcpy
import os
# # Set the workspace (replace with your workspace path)
# arcpy.env.workspace= 'GDB'
#
# # Get a list of feature classes in the workspace
# feature_classes = arcpy.ListFeatureClasses()
#
# # Iterate through the list and print the names
# for feature_class in feature_classes:
#     print(feature_class)

# ----------Open an already existing text file ---------------------------------------------------------------------------
# # Specify the path to the text file
# file_path = '.txt'

# # Open the file in read mode with 'utf-8' encoding
# try:
#     with open(file_path, 'r', encoding='utf-8') as file:
#         for line in file:
#             print(line, end="")
# except FileNotFoundError:
#     print(f"The file '{file_path}' does not exist")
# except Exception as e:
#     print(f"An error occurred: {e}")
# ---------- Document field properties feature class into a text file ----------------------------------------------------------------------------------------------------------------------------------------
# # Step 1: Import required modules and set workspace
# arcpy.env.workspace = r".gdb"

# # Step 2: Create a list of fields from the feature class
# feature_class_name = "MajorAttractions"
# fields = arcpy.ListFields(feature_class_name)
#
# # Step 3: Open a new text file and add header lines
# output_folder = r"D:\1_BVIEER\3rd_sem\Programming for GIS- III Mr. Ronit Jadhav\Assignments\Assignment_3"
# output_file_name = "MajorAttractions_FieldInfo.txt"
# output_file_path = os.path.join(output_folder, output_file_name)
#
# with open(output_file_path, 'w') as file_obj:
#     file_obj.write(f"Field properties for the '{feature_class_name}' feature class:\n\n")
#
#     # Step 4: Loop through the list of fields
#     for field in fields:
#         # Step 5: Write each field's properties to the text file
#         file_obj.write(f"Field Name: {field.name}\n")
#         file_obj.write(f"Data Type: {field.type}\n")
#         file_obj.write(f"Length: {field.length}\n")
#         file_obj.write(f"Scale: {field.scale}\n")
#         file_obj.write("\n")
# # Step 6: Indicate that the script is completed
# print(f"Field properties have been written to {output_file_path}")

# ------ Conditional Buffer -------------------------------------------------------------------------------------------------------
# Set the workspace
arcpy.env.workspace = r".gdb"
# List all feature classes in the workspace
fc_list = arcpy.ListFeatureClasses()
# Loop through each feature class
for fc in fc_list:
    # Describe the feature class to get its shape type
    desc_obj = arcpy.Describe(fc)
    shape_type = desc_obj.shapeType

    # Set buffer distances based on shape type
    if shape_type == "Point":
        buffer_distance = 450  # 450 feet
    elif shape_type == "Polyline":
        buffer_distance = 1500  # 1500 feet
    elif shape_type == "Polygon":
        buffer_distance = 500  # 500 feet
    # Create an output buffer feature class
    output_buffer = fc + "_Buffer"

    # Perform the buffer analysis using the specified buffer distance
    arcpy.analysis.Buffer(fc, output_buffer, f"{buffer_distance} feet")
    print(f"Buffer created for {fc} with a {buffer_distance} buffer distance.")
    print("Process Completed")

# **************  feature class into a feature layer ***********************************************************************************
gdb_path = r".gdb"
restaurant_fc_name = "Wilson_Restaurants"

restaurant_fc_path = os.path.join(gdb_path, restaurant_fc_name)

# Feature class to feature layer
arcpy.management.MakeFeatureLayer(restaurant_fc_path,"restaurant_Layer")

# Count of all the features before selection
pre_count = arcpy.GetCount_management("restaurant_Layer")

print("Total number of restaurants = {} ".format(pre_count))

#******************* Print the crime count within 500 meters distance from all the restaurants **************
gdb_path = r".gdb"
restaurant_fc_name = "Wilson_Restaurants"
crime_fc_name = "Wilson_Crimes96"

restaurant_fc_path = os.path.join(gdb_path,restaurant_fc_name)
crime_fc_path = os.path.join(gdb_path,crime_fc_name)

arcpy.management.MakeFeatureLayer(restaurant_fc_path,"restaurant_lyr")
arcpy.management.MakeFeatureLayer(crime_fc_path,"crime_lyr")

# getting count of all the features before selection
pre_count1=arcpy.GetCount_management("restaurant_lyr")
pre_count3=arcpy.GetCount_management("crime_lyr")

# Query
arcpy.management.SelectLayerByLocation("crime_lyr","WITHIN_A_DISTANCE","restaurant_lyr","500 meters")
post_count3 =arcpy.GetCount_management("crime_lyr")
print('crime near 500 meters of restaurant = {}'.format(post_count3))

print("Process Completed")

# ***** Selection based on criteria ***************************************************************************************
gdb_path = r".gdb"
restaurant_fc_name = "Wilson_Restaurants"
histdist_fc_name = "Wilson_Histdist"
crime_fc_name = "Wilson_Crimes96"

restaurant_fc_path = os.path.join(gdb_path,restaurant_fc_name)
histdist_fc_path = os.path.join(gdb_path,histdist_fc_name)
crime_fc_path = os.path.join(gdb_path,crime_fc_name)

arcpy.management.MakeFeatureLayer(restaurant_fc_path,"restaurant_lyr")
arcpy.management.MakeFeatureLayer(histdist_fc_path,"histdist_lyr")
arcpy.management.MakeFeatureLayer(crime_fc_path,"crime_lyr")

# getting count of all the features before selection
pre_count1=arcpy.GetCount_management("restaurant_lyr")
pre_count2=arcpy.GetCount_management("histdist_lyr")
pre_count3=arcpy.GetCount_management("crime_lyr")

print('Total Restaurants before selection = {}'.format(pre_count1[0]))
print('Total historic district before selection = {}'.format(pre_count2[0]))
print('Total crime before selection = {}'.format(pre_count3[0]))

arcpy.management.SelectLayerByAttribute("restaurant_lyr","NEW_SELECTION","ALCOHOL=1")
post_count1 = arcpy.GetCount_management("restaurant_lyr")
print('total restaurants serves alcohol = {}'.format(post_count1))

arcpy.management.SelectLayerByLocation("restaurant_lyr","WITHIN_A_DISTANCE","histdist_lyr","1000 feet","SUBSET_SELECTION")
post_count2 =arcpy.GetCount_management("restaurant_lyr")
print('total restaurants serves alcohol within 1000 feet of histdist = {}'.format(post_count2))

arcpy.management.SelectLayerByLocation("crime_lyr","WITHIN_A_DISTANCE","restaurant_lyr","500 feet")
post_count3 =arcpy.GetCount_management("crime_lyr")
print('crime near 500 feet of restaurant = {}'.format(post_count3))

arcpy.management.SelectLayerByAttribute("crime_lyr","SUBSET_SELECTION","ALCOHOL>0")
post_count4 = arcpy.GetCount_management("crime_lyr")
print('Alcohol related crime = {}'.format(post_count4))


print("Process Completed")

# ****** Use SearchCursor to print all the feature class **********************************
gdp_path = r".gdb"
fc_name = "MajorAttractions"
fc_path = os.path.join(gdp_path,fc_name)

field_list = ["NAME","ADDR"]

with arcpy.da.SearchCursor(fc_path,field_list) as s_cursor:
    for row in s_cursor:
        print("Name:{} |  Address:{}".format(row[0], row[1]))
    del s_cursor
# ******  SearchCursor to append names on condition ***********************************************
gdp_path = r".gdb"

fc_name = "MajorAttractions"
fc_path = os.path.join(gdp_path,fc_name)

field_list = ["NAME","ADDR","ESTAB"]

with arcpy.da.SearchCursor(fc_path,field_list,"ESTAB>1970") as s_cursor:
    for row in s_cursor:
        print("Name:{},  Establishment:{}".format(row[0], row[2]))
    del s_cursor
print("Process completed") 
# ************** Print the features X and Y coordinates using the search cursor *******************
gdp_path = r".gdb"

fc_name = "MajorAttractions"
fc_path = os.path.join(gdp_path,fc_name)

field_list = ["NAME","SHAPE@X","SHAPE@Y"]
print("-------------------------- majorAttraction and its coordinates -------------------------------")
with arcpy.da.SearchCursor(fc_path,field_list) as s_cursor:
    for row in s_cursor:
        print("Name: {}, X-corrdinates:{},  Y-coordinates:{}".format(row[0],row[1], row[2]))
    del s_cursor

# ************* UpdateCursor to update the value in that field **************************************
import arcpy
import os
gdp_path = r".gdb"
fc_name = "Majo"

fc_path = os.path.join(gdp_path,fc_name)

field_list = ["NAME","ESTAB","HISTORIC"]

with arcpy.da.UpdateCursor(fc_path,field_list) as U_cursor:
    for row in U_cursor:

        if row[1]<1960:
            row[2] = "yes"
        else:
            row[2] = "No"
        U_cursor.updateRow(row)

print("Process Completed")

# ------ Insert new values in attribute ----------------------------
gdp_path = r".gdb"
fc_name = "Major"

fc_path = os.path.join(gdp_path,fc_name)

field_list = ["NAME","ESTAB","ADDR","CITYNM","ZIP","EMP","ACRES"]

record_1 = (" Five Star Restaurant",2021,"841 STREET","SAN DIEGO",92101,150,10)
record_2 = (" New Town Restaurant ",2022,"842 STREET","SAN DIEGO",92105,140,15)

i_cursor = arcpy.da.InsertCursor(fc_path,field_list)
i_cursor.insertRow(record_1)
i_cursor.insertRow(record_2)
print("Process Completed")

#***********************
